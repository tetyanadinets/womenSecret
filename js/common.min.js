(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Common() {
    _classCallCheck(this, Common);
  }

  _createClass(Common, [{
    key: "init",
    value: function init() {
      this.scrollWindow();
      this.wishListCtrl();
      this.headerSearchCtrl();
      this.footTabCtrl();

      if ($(window).innerWidth() <= 1200) {
        this.langMobCtrl();
      }

      if ($(window).innerWidth() <= 1080) {
        this.mobMenuChild();
      }

      this.categoryVievCtrl();
      this.filtersCtrl();
      this.quantityCtrl();
      this.itemColorsCtrl();
      this.tabs();
      this.showPass();
      this.faqAcorderon();
      this.map();
      this.sumsertificate();
      this.hiddenFormItem();

      if ($(window).innerWidth() >= 1080) {
        this.goodsImgCtrl();
      }

      this.passRecoveryCtrl();
    }
  }, {
    key: "lazyInitCtrl",
    value: function lazyInitCtrl() {
      var className = '.lazy';
      $(className).Lazy({
        visibleOnly: true
      });
    }
  }, {
    key: "tabs",
    value: function tabs() {
      var _self = this;

      $('[data-tab]').on('click', function (e) {
        e.preventDefault();
        var dataTab = $(this).data('tab');
        var dataContent = $(this).parent().next('.tab-content').children('[data-content]');

        if (dataTab == 'tab-courier' || dataTab == 'tab-self-pickup' || dataTab == 'tab-pickup') {
          $(this).parent().next('.tab-content').removeClass('tab-courier tab-self-pickup tab-pickup');
        }

        if (!$(this).hasClass('active')) {
          $(this).siblings().removeClass('active');
          dataContent.removeClass('active');
          $(this).addClass('active');
          dataContent.addClass('not-active');
          $(this).parent().next('.tab-content').children('[data-content=' + dataTab + ']').addClass('active');
          $(this).parent().next('.tab-content').children('[data-content=' + dataTab + ']').removeClass('not-active');
          $(this).parent().next('.tab-content').addClass(dataTab);

          _self.lazyInitCtrl();

          $('.form-item_select .select').select2({
            minimumResultsForSearch: -1
          });
          $('.form-item_select .select-search').select2({});
        }
      });
    }
  }, {
    key: "scrollWindow",
    value: function scrollWindow() {
      $(window).scroll(function () {
        if ($(window).scrollTop() > 160) {
          $('body').addClass('scroll');
        } else {
          $('body').removeClass('scroll');
        }
      });
    }
  }, {
    key: "passRecoveryCtrl",
    value: function passRecoveryCtrl() {
      $('.popup_choose select').on('change', function () {
        if ($(".popup_choose select option:selected").val() === 'by-phone') {
          console.log('ok phone');
          $('#password-recovery-choice-of-method .form-item.phone').removeClass('hidden');
          $('#password-recovery-choice-of-method .form-item.mail').addClass('hidden');
        }

        if ($(".popup_choose select option:selected").val() === 'by-mail') {
          console.log('ok mail');
          $('#password-recovery-choice-of-method .form-item.mail').removeClass('hidden');
          $('#password-recovery-choice-of-method .form-item.phone').addClass('hidden');
        }
      });
    }
  }, {
    key: "wishListCtrl",
    value: function wishListCtrl() {
      $('.wish-btn').on('click', function (e) {
        e.preventDefault();
        $(this).toggleClass('active');
      });
    }
  }, {
    key: "goodsImgCtrl",
    value: function goodsImgCtrl() {
      $('.goods__item-outer .item__img').on('mouseenter', function (e) {
        var src = $(this).data('hoverimg');
        $(this).css('background-image', 'url(' + src + ')');
      });
      $('.goods__item-outer .item__img').on('mouseleave', function (e) {
        var defsrc = $(this).data('defaultimg');
        $(this).css('background-image', 'url(' + defsrc + ')');
      });
    }
  }, {
    key: "headerSearchCtrl",
    value: function headerSearchCtrl() {
      $('.search-btn').on('click', function (e) {
        e.preventDefault();
        $('.header__middle').toggleClass('search-active');
        $('body').removeClass('openNav'); // if($('body').hasClass('search-results-page')) {
        // 	$('.search-suggest').css('display','block')
        // }
      });
    }
  }, {
    key: "footTabCtrl",
    value: function footTabCtrl() {
      $('.foot-tab-head').on('click', function () {
        $(this).next('.foot-tab-body').toggleClass('active');
        $(this).toggleClass('active');
      });
    }
  }, {
    key: "langMobCtrl",
    value: function langMobCtrl() {
      $('.switcher-dropdown').on('click', function () {
        $(this).addClass('active');
      });
    }
  }, {
    key: "mobMenuChild",
    value: function mobMenuChild() {
      $('.header__link_l1').on('click', function (e) {
        e.preventDefault();
        $('.header__catalog-item').removeClass('active');
        $(this).parent().addClass('active');
      });
      $('.main-menu__close').on('click', function () {
        $('.header__catalog-item').removeClass('active');
      });
    }
  }, {
    key: "categoryVievCtrl",
    value: function categoryVievCtrl() {
      $('.category__viev-item').on('click', function () {
        $('.category__viev-item').removeClass('active');
        $(this).addClass('active');

        if ($(this).hasClass('category__viev-item_sm')) {
          $('.goods').addClass('goods_sm');
        } else {
          $('.goods').removeClass('goods_sm');
        }
      });
    }
  }, {
    key: "filtersCtrl",
    value: function filtersCtrl() {
      $('.filters__head').on('click', function () {
        var parent = $(this).parent();

        if (parent.hasClass('active')) {
          console.log(parent);
          parent.removeClass('active');
        } else {
          $('.filters__item').removeClass('active');
          parent.addClass('active');
        }
      });
      $('.filters__btn').on('click', function () {
        $('.filters').toggleClass('active');
      });
    }
  }, {
    key: "quantityCtrl",
    value: function quantityCtrl() {
      $('.quantity__right-plus').click(function () {
        var th = $(this).closest('.quantity').find('.input-number');
        th.val(+th.val() + 1);
      });
      $('.quantity__left-minus').click(function () {
        var th = $(this).closest('.quantity').find('.input-number');
        if (th.val() > 1) th.val(+th.val() - 1);
      });
    }
  }, {
    key: "itemColorsCtrl",
    value: function itemColorsCtrl() {
      $('.colors__item label, .sizes__item label').on('click', function (e) {
        var color = $(this).parent().data('val');
        console.log(color);
        $(this).parent().parent().prev('.row-val').find('span').html(color);
      });
    }
  }, {
    key: "showPass",
    value: function showPass() {
      $('.watch').on('click', function () {
        $("#password").prop("type", "text");
        setTimeout(function () {
          $("#password").prop("type", "password");
        }, 2000);
      });
    }
  }, {
    key: "faqAcorderon",
    value: function faqAcorderon() {
      $('.acordeon .item__head').on('click', function () {
        $(this).next('.item__body').toggleClass('active');
        $(this).toggleClass('active');
      });
    }
  }, {
    key: "map",
    value: function map() {
      /**
      * initMap
      *
      * Renders a Google Map onto the selected jQuery element
      *
      * @date    22/10/19
      * @since   5.8.6
      *
      * @param   jQuery $el The jQuery element.
      * @return  object The map instance.
      */
      function initMap($el) {
        // Find marker elements within map.
        var $markers = $el.find('.marker'); // Create gerenic map.

        var mapArgs = {
          zoom: $el.data('zoom') || 16,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          disableDefaultUI: true,
          styles: [{
            "elementType": "geometry",
            "stylers": [{
              "color": "#f5f5f5"
            }]
          }, {
            "elementType": "labels.icon",
            "stylers": [{
              "visibility": "off"
            }]
          }, {
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#616161"
            }]
          }, {
            "elementType": "labels.text.stroke",
            "stylers": [{
              "color": "#f5f5f5"
            }]
          }, {
            "featureType": "administrative.land_parcel",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#bdbdbd"
            }]
          }, {
            "featureType": "poi",
            "elementType": "geometry",
            "stylers": [{
              "color": "#eeeeee"
            }]
          }, {
            "featureType": "poi",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#757575"
            }]
          }, {
            "featureType": "poi.park",
            "elementType": "geometry",
            "stylers": [{
              "color": "#e5e5e5"
            }]
          }, {
            "featureType": "poi.park",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#9e9e9e"
            }]
          }, {
            "featureType": "road",
            "elementType": "geometry",
            "stylers": [{
              "color": "#ffffff"
            }]
          }, {
            "featureType": "road.arterial",
            "stylers": [{
              "visibility": "off"
            }]
          }, {
            "featureType": "road.arterial",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#757575"
            }]
          }, {
            "featureType": "road.highway",
            "elementType": "geometry",
            "stylers": [{
              "color": "#dadada"
            }]
          }, {
            "featureType": "road.highway",
            "elementType": "labels",
            "stylers": [{
              "visibility": "off"
            }]
          }, {
            "featureType": "road.highway",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#616161"
            }]
          }, {
            "featureType": "road.local",
            "stylers": [{
              "visibility": "off"
            }]
          }, {
            "featureType": "road.local",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#9e9e9e"
            }]
          }, {
            "featureType": "transit.line",
            "elementType": "geometry",
            "stylers": [{
              "color": "#e5e5e5"
            }]
          }, {
            "featureType": "transit.station",
            "elementType": "geometry",
            "stylers": [{
              "color": "#eeeeee"
            }]
          }, {
            "featureType": "water",
            "elementType": "geometry",
            "stylers": [{
              "color": "#c9c9c9"
            }]
          }, {
            "featureType": "water",
            "elementType": "labels.text.fill",
            "stylers": [{
              "color": "#9e9e9e"
            }]
          }]
        };
        var map = new google.maps.Map($el[0], mapArgs); // Add markers.

        map.markers = [];
        $markers.each(function () {
          initMarker($(this), map);
        }); // Center map based on markers.

        centerMap(map); // Return map instance.

        return map;
      }
      /**
       * initMarker
       *
       * Creates a marker for the given jQuery element and map.
       *
       * @date    22/10/19
       * @since   5.8.6
       *
       * @param   jQuery $el The jQuery element.
       * @param   object The map instance.
       * @return  object The marker instance.
       */


      var infoWindows = [];

      function initMarker($marker, map) {
        // Get position from marker.
        var lat = $marker.data('lat');
        var lng = $marker.data('lng');
        var index = $marker.data('index');
        var latLng = {
          lat: parseFloat(lat),
          lng: parseFloat(lng)
        }; // Create marker instance.

        var marker = new google.maps.Marker({
          position: latLng,
          map: map,
          icon: '../img/svg/marker.svg'
        }); // Append to reference for later use.

        map.markers[index] = marker; // If marker contains HTML, add it to an infoWindow.

        if ($marker.html()) {
          // Create info window.
          var infowindow = new google.maps.InfoWindow({
            content: $marker.html()
          });
          infoWindows.push(infowindow); // infowindow.open( map, marker );

          google.maps.event.addListener(marker, 'click', function (marker, index) {
            return function () {
              for (var i = 0; i < infoWindows.length; i++) {
                infoWindows[i].close();
              }

              infowindow.open(map, marker);
            };
          }(marker, index));
        }
      }
      /**
       * centerMap
       *
       * Centers the map showing all markers in view.
       *
       * @date    22/10/19
       * @since   5.8.6
       *
       * @param   object The map instance.
       * @return  void
       */


      function centerMap(map) {
        // Create map boundaries from all map markers.
        var bounds = new google.maps.LatLngBounds();
        map.markers.forEach(function (marker) {
          bounds.extend({
            lat: marker.position.lat(),
            lng: marker.position.lng()
          });
        }); // Case: Single marker.

        if (map.markers.length == 1) {
          map.setCenter(bounds.getCenter()); // Case: Multiple markers.
        } else {
          map.fitBounds(bounds);
        }
      } // Render maps on page load.


      $(document).ready(function () {
        var map = initMap($('.map'));
        $('.shops__result-item').on('click', function () {
          var index = $(this).data('index');
          google.maps.event.trigger(map.markers[index], 'click');
          $('.shops__result-item').removeClass('active');
          $(this).addClass('active');
        });
      });
      $('.shops__clear').on('click', function (e) {
        e.preventDefault();
        $('.search_map input').html('');
        $('.search_map input').val('');
      });
    }
  }, {
    key: "sumsertificate",
    value: function sumsertificate() {
      $('.form-item_sum').on('click', function () {
        $('.form-item_sertif').addClass('disabled');

        if ($(this).hasClass('form-item_sum-input')) {
          $('.form-item_sertif').removeClass('disabled');
        }
      });
    }
  }, {
    key: "hiddenFormItem",
    value: function hiddenFormItem() {
      $('[data-show-hidden]').on('click', function (e) {
        e.preventDefault();
        $(this).next('.form-item').toggleClass('hidden');
      });
    }
  }]);

  return Common;
}();

},{}],2:[function(require,module,exports){
"use strict";

function libsActivate() {
  // slick slider
  (function () {
    $('.mainSlider').slick({
      dots: true,
      infinite: false,
      speed: 300,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      fade: true
    });
    $('.newsSlider').slick({
      dots: true,
      infinite: false,
      speed: 300,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      fade: true
    });
    $('.slider-for').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: false,
      fade: true,
      asNavFor: '.slider-nav'
    });
    $('.slider-nav').slick({
      slidesToShow: 4,
      slidesToScroll: 1,
      asNavFor: '.slider-for',
      dots: false,
      arrows: false,
      focusOnSelect: true,
      vertical: true,
      verticalSwiping: true,
      responsive: [{
        breakpoint: 1080,
        settings: {
          vertical: false,
          verticalSwiping: false,
          centerMode: true,
          centerPadding: '40px'
        }
      }, {
        breakpoint: 767,
        settings: {
          slidesToShow: 3,
          vertical: false,
          verticalSwiping: false,
          centerPadding: '20px'
        }
      }, {
        breakpoint: 580,
        settings: {
          slidesToShow: 2,
          vertical: false,
          verticalSwiping: false,
          centerPadding: '10px'
        }
      }]
    });

    var lazyInit = function lazyInit() {
      // var className  = $(window).innerWidth() >= 480 ? '.lazy' : '.lazy_mob'
      var className = '.lazy';
      $(className).Lazy({
        visibleOnly: true
      });
    };

    lazyInit();
    $(window).on('resize', function () {
      lazyInit();
    });
    $('.form-item_select .select').select2({
      minimumResultsForSearch: -1
    });
    $('.form-item_select .select-search').select2({}); // new AOS().init();

    AOS.init({
      once: false,
      duration: 500,
      easing: 'easeInBack',
      disable: 'mobile'
    });
    $('.sendForm').parsley({
      excluded: '.not-active input, .not-active textarea, .not-active select'
    });
  })();
}

module.exports = libsActivate();

},{}],3:[function(require,module,exports){
"use strict";

var Preloader = require('./preloader.js');

var Common = require('./common.js');

var Popup = require('./popup.js');

var Nav = require('./nav.js'); // const ValidForm = require('./form');
// require('./form');


require('./libs-activate');

window.addEventListener('load', function () {
  svg4everybody({});
  var preloader = new Preloader();
  preloader.init(); // let sendForm = new ValidForm('.sendForm').init()

  var nav = new Nav().init();
  var popup = new Popup().events();
  var common = new Common().init();
});

},{"./common.js":1,"./libs-activate":2,"./nav.js":4,"./popup.js":5,"./preloader.js":6}],4:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Nav() {
    _classCallCheck(this, Nav);

    this.body = $('body');
    this.hamburger = $('#hamburger');
    this.headerNav = $('.headerNav');
  }

  _createClass(Nav, [{
    key: "init",
    value: function init() {
      this.events();
    }
  }, {
    key: "events",
    value: function events() {
      var _this = this;

      this.hamburger.on('click', function () {
        if (_this.body.hasClass('openNav')) {
          _this.closeNav();
        } else {
          _this.openNav();

          $('.header__middle').removeClass('search-active');
        }
      }); // this.headerNav.on('click', '.popupBtn', ()=> {
      // 	this.closeNav()
      // })
    }
  }, {
    key: "openNav",
    value: function openNav() {
      var _this2 = this;

      var openPromise = new Promise(function (resolve, regect) {
        _this2.body.addClass('openNav');

        setTimeout(resolve, 0);
      });
      openPromise.then(function () {
        _this2.headerNav.addClass('openNav');
      });
    }
  }, {
    key: "closeNav",
    value: function closeNav() {
      var _this3 = this;

      var closePromise = new Promise(function (resolve, regect) {
        _this3.headerNav.removeClass('openNav');

        setTimeout(resolve, 300);
      });
      closePromise.then(function () {
        _this3.body.removeClass('openNav');
      });
    }
  }]);

  return Nav;
}();

},{}],5:[function(require,module,exports){
'use strict'; // popup windows

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function GetPopup() {
    _classCallCheck(this, GetPopup);

    this.$ = jQuery;
    this.popupBtn = $('.popupBtn');
    this.popup = $('.popup');
    this.hash = window.location.hash;
    this.openPopup(this.hash);
  }

  _createClass(GetPopup, [{
    key: "events",
    value: function events() {
      var _this = this;

      var that = this;
      this.popupBtn.on('click', function (e) {
        e.preventDefault();
        var href = this.getAttribute('href');
        that.openPopup(href);
        $('.form-item_select .select').select2({
          minimumResultsForSearch: -1
        });
      });
      this.popup.on('click', '.close, .close-popup, .anchorBtn', function (e) {
        e.preventDefault();

        _this.closePopup();
      });
      document.addEventListener('keydown', function (e) {
        if (e.keyCode === 27) {
          _this.closePopup();
        }
      });
    }
  }, {
    key: "openPopup",
    value: function openPopup(href) {
      var popup = $(href);

      if (this.popup.hasClass('show_popap')) {
        popup = $('.show_popap');
      }

      ;
      if (!popup.length) return;
      document.body.classList.add('hidden');
      setTimeout(function () {
        popup.addClass('show_popup');
      }, 100);
    }
  }, {
    key: "closePopup",
    value: function closePopup() {
      var loc = window.location;
      this.popup.removeClass('show_popup');
      setTimeout(function () {
        document.body.classList.remove('hidden');
      }, 300);
      history.pushState('', '', loc.pathname + loc.search);
    }
  }]);

  return GetPopup;
}();

},{}],6:[function(require,module,exports){
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function Preloader(loader) {
    _classCallCheck(this, Preloader);

    this.loader = document.querySelector('#preloader');
  }

  _createClass(Preloader, [{
    key: "init",
    value: function init() {
      var _this = this;

      document.body.classList.add('show');
      if (!this.loader) return;
      this.loader.classList.add('hide');
      setTimeout(function () {
        if (_this.loader.remove) {
          _this.loader.remove();
        }

        ;

        _this.loader.classList.add('remove');
      }, 2000);
    }
  }]);

  return Preloader;
}();

},{}]},{},[3]);

//# sourceMappingURL=main.js.map
